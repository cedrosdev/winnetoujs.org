<span class="category">Constructos</span>
<h1>Creating and Using Winnetou's Web Components: Constructos</h1>

<p>

  Constructos are the foundation of WinnetouJs. Through them it is possible to write complex and scalable applications without having to mix javascript with html.

  Constructos must be saved in the folder defined in win.config.js "constructosPath" as html files. The file name will be the name of the class generated by the WBR.

  The base of a Constructo can be written as follows:
</p>


<div class="codeOutput">
  <span class="code-file-name">base.html</span>
  <pre><code class="onloadCode">
      
&lt;winnetou&gt;
    &lt;div id=&quot;[[myFirstDiv]]&quot;&gt;{{text}}&lt;/div&gt;
&lt;/winnetou&gt;
     
    </code></pre>
</div>

<p>

  Constructos receive only two parameters: ids and props. Ids are represented by double brackets <code>[[ ]]</code> and props by double braces <code>
    {{ }}</code>. Constructos never receive logic code.

</p>

<p>
  Save the file as "./constructos/base.html" and run wbr in terminal: <code>node wbr --bundleRelease</code>.


<p>

  At this moment the wbr interface will be loaded in the terminal and will show if an error has occurred, otherwise it will compile our first Constructo and show the success message on the screen. At this time, our watchers will also be running and any changes made to base.html will be automatically compiled while the wbr is running in the terminal.

  WBR will create our constructo js file inside the constructosOut defined in win.config.js.

</p>

<p>
  The name of constructo js output file will be the same of html source, eg: <code>myComponents.html -> myComponents.js</code>. Is from the js output file that we will import the WinnetouJS web components.
</p>

<div class="codeOutput">
  <span class="code-file-name">myFirstConstructo.js</span>
  <pre><code class="onloadCode">
        
import { myFirstDiv } from "./constructos/base.js";
myFirstDiv({ text: "Hello World!" }).create("#app");
       
      </code></pre>
</div>


<p>

  The <code>id</code> of the constructo defined in <code>[[myFirstDiv]]</code> will be the name of component, in order to import it. Parameters can be create using brackets annotation, where <code>{{text}}</code> will be <code>{ text: "Hello World!" }</code>.

</p>


<p>Now, just import bundle into your html index page. <a href='/docs/type-module-script'>You can also use the module type</a> in script tag in development in order to improve productivity.</p>

<div class="codeOutput">
  <span class="code-file-name">index.html</span>
  <pre><code class="onloadCode">
        
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
    &lt;title&gt;Welcome to WinnetouJs&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;./release/winnetouBundle.min.css&quot; /&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;
    &lt;script src=&quot;./release/winnetouBundle.min.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
       
      </code></pre>
</div>





<%- include('../template/footer.ejs',{text:'Advanced Constructos Options',url:'/docs/advanced-constructos-options'}) %>