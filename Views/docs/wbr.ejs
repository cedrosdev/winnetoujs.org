<span class="category">Compiling to Production</span>
<h1>Winnetou Bundle Releaser - WBR</h1>
<p>
  The creation of the bundle is very easy and is done through the babel and webpack.

  You just need to determine the entry and the out in win.config.js.</p>
<p>You can set more than one app to be compiled at same time.</p>

<div class="codeOutput">
  <span class="code-file-name">win.config.js</span>
  <pre>
<code class="onloadCode">
...
apps:[{
  entry: "./js/themesApp.js",
  out: "./releaseThemesApp"
}],
...
</code></pre>
</div>

<p>
  and run <code>

    node wbr --bundleRelease
  </code>
  and the bundle release will be in "./release/winnetouBundle.min.js" with the source map and lazy modules too.</p>


<h2>Production Mode</h2>
<p>
  WBR will compile in dev mode allowing you debug your code in devtools with mapping. To reduce bundle size and obfuscate the output, run with --production flag: <code>node wbr --bundleRelease --production</code>.
</p>

<div class="linkBox">
  <h2>WBR Arguments</h2>
  <p>
    <a href="/api/wbr-compiler">Click here</a>
    to go to api and learn more about wbr.
  </p>
</div>

<h2>In Deep Projects</h2>
<p>
  If you are working with deep project folders and calls js files in up folders, add this dev dependencies to you main package.json on the project root, otherwise you may get some webpack errors:
</p>

<div class="codeOutput">
  <span class="code-file-name">package.json</span>
  <pre><code class="onloadCode">
        
"devDependencies": {
    "@babel/core": "^7.24.5",
    "@babel/eslint-parser": "^7.24.5",
    "@babel/plugin-transform-nullish-coalescing-operator": "^7.24.1",
    "@babel/plugin-transform-optional-chaining": "^7.24.5",
    "@babel/plugin-transform-runtime": "^7.24.3",
    "@babel/preset-env": "^7.24.5",
    "@babel/runtime": "^7.24.5",
    "babel-loader": "^9.1.3",
    "webpack": "^5.2.0"
}
            
       
      </code></pre>
</div>



<%- include('../template/footer.ejs',{text:'You finished! Back to installation.',url:'/docs/setting-up'}) %>